{"version":3,"sources":["app.js"],"names":["profileWrap","document","querySelector","headerTitle","addEventListener","classList","add","remove","header","window","scrollY","async","icons","querySelectorAll","icon","src","getAttribute","response","fetch","svgText","text","innerHTML","e","console","error"],"mappings":"AAAA,MAAAA,YAAAC,SAAAC,cAAA,gBACAC,YAAAF,SAAAC,cAAA,gBAEAF,YAAAI,iBAAA,aAAA,KACAD,YAAAE,UAAAC,IAAA,UAGAN,YAAAI,iBAAA,aAAA,KACAD,YAAAE,UAAAE,OAAA,UAGA,MAAAC,OAAAP,SAAAC,cAAA,WAEAO,OAAAL,iBAAA,SAAA,KACAK,OAAAC,QAAA,IACAF,OAAAH,UAAAC,IAAA,YAEAE,OAAAH,UAAAE,OAAA,cAIAN,SAAAG,iBAAA,mBAAAO,UACA,MAAAC,EAAAX,SAAAY,iBAAA,SAEA,IAAA,MAAAC,KAAAF,EAAA,CACA,MAAAG,EAAAD,EAAAE,aAAA,YACA,GAAAD,EAEA,IACA,MAAAE,QAAAC,MAAAH,GACAI,QAAAF,EAAAG,OACAN,EAAAO,UAAAF,CACA,CAAA,MAAAG,GACAC,QAAAC,MAAA,kBAAAT,IAAAO,EACA,CACA","file":"bundle.js","sourcesContent":["const profileWrap = document.querySelector(\".profileWrap\");\r\nconst headerTitle = document.querySelector(\".headerTitle\");\r\n\r\nprofileWrap.addEventListener(\"mouseenter\", () => {\r\n\theaderTitle.classList.add(\"hide\");\r\n});\r\n\r\nprofileWrap.addEventListener(\"mouseleave\", () => {\r\n\theaderTitle.classList.remove(\"hide\");\r\n});\r\n\r\nconst header = document.querySelector(\".header\");\r\n\r\nwindow.addEventListener(\"scroll\", () => {\r\n\tif (window.scrollY > 150) {\r\n\t\theader.classList.add(\"scrolled\");\r\n\t} else {\r\n\t\theader.classList.remove(\"scrolled\");\r\n\t}\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n\tconst icons = document.querySelectorAll(\".icon\");\r\n\r\n\tfor (const icon of icons) {\r\n\t\tconst src = icon.getAttribute(\"data-src\");\r\n\t\tif (!src) continue;\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(src);\r\n\t\t\tconst svgText = await response.text();\r\n\t\t\ticon.innerHTML = svgText; // inject SVG inline\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(`Could not load ${src}`, e);\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// document.addEventListener(\"DOMContentLoaded\", () => {\r\n// \t// Inline your SVGs once (like you already do) — keeping your existing loader is fine.\r\n\r\n// \t// Add per-hover randomness:\r\n// \tdocument.querySelectorAll(\".card__content\").forEach(card => {\r\n// \t\tconst icons = card.querySelectorAll(\".floating-icons .icon\");\r\n\r\n// \t\tcard.addEventListener(\"mouseenter\", () => {\r\n// \t\t\t// bounds for random placement\r\n// \t\t\tconst container = card.querySelector(\".floating-icons\");\r\n// \t\t\tconst cRect = container.getBoundingClientRect();\r\n// \t\t\tconst iconSize = 60; // keep in sync with CSS\r\n// \t\t\tconst pad = 12;\r\n\r\n// \t\t\ticons.forEach(icon => {\r\n// \t\t\t\t// Randomize animation parameters (duration, delay, amplitude, x drift, rotation)\r\n// \t\t\t\tconst dur = 6 + Math.random() * 10; // 6–16s\r\n// \t\t\t\tconst delay = Math.random() * 3; // 0–3s\r\n// \t\t\t\tconst dx = (Math.random() < 0.5 ? -1 : 1) * (10 + Math.random() * 30); // ±(10–40)px horizontal drift\r\n// \t\t\t\tconst amp = -20 - Math.random() * 60; // -20 to -80px vertical amplitude (upwards)\r\n// \t\t\t\tconst rot = 360 + Math.floor(Math.random() * 360); // 360–720deg per cycle\r\n\r\n// \t\t\t\ticon.style.setProperty(\"--dur\", `${dur}s`);\r\n// \t\t\t\ticon.style.setProperty(\"--delay\", `${delay}s`);\r\n// \t\t\t\ticon.style.setProperty(\"--dx\", `${dx}px`);\r\n// \t\t\t\ticon.style.setProperty(\"--amp\", `${amp}px`);\r\n// \t\t\t\ticon.style.setProperty(\"--rot\", `${rot}deg`);\r\n\r\n// \t\t\t\t// Randomize starting position within the container (with padding)\r\n// \t\t\t\tconst maxX = cRect.width - iconSize - pad * 2;\r\n// \t\t\t\tconst maxY = cRect.height - iconSize - pad * 2;\r\n// \t\t\t\tconst x = pad + Math.random() * Math.max(0, maxX);\r\n// \t\t\t\tconst y = pad + Math.random() * Math.max(0, maxY);\r\n\r\n// \t\t\t\ticon.style.left = `${x}px`;\r\n// \t\t\t\ticon.style.top = `${y}px`;\r\n// \t\t\t});\r\n// \t\t});\r\n\r\n// \t\t// Optional: clear inline vars on leave if you want a fresh set next time (not required)\r\n// \t\t// card.addEventListener(\"mouseleave\", () => {\r\n// \t\t//   icons.forEach((icon) => {\r\n// \t\t//     icon.style.removeProperty(\"--dur\");\r\n// \t\t//     icon.style.removeProperty(\"--delay\");\r\n// \t\t//     icon.style.removeProperty(\"--dx\");\r\n// \t\t//     icon.style.removeProperty(\"--amp\");\r\n// \t\t//     icon.style.removeProperty(\"--rot\");\r\n// \t\t//   });\r\n// \t\t// });\r\n// \t});\r\n// });\r\n"]}